/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Webhooks {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create Webhook Subscription
   *
   * @remarks
   * Create a Webhook Subscription for an Organization or User.
   *
   * * The `organization` subscription scope triggers the webhook for all subscribed events within the organization.
   * * The `user` subscription scope only triggers the webhook for subscribed events that belong to the specific user.
   *
   * | Event | Allowed Subscription Scopes |
   * | ----- | --------------------------- |
   * | <pre>invitee.created</pre> | `organization` `user` |
   * | <pre>invitee.canceled</pre> | `organization` `user` |
   * | <pre>routing_form_submission.created</pre> | `organization` <br /> <small>Create separate Webhook Subscriptions for events with different subscription scopes.</small> |
   */
  create(
    req: operations.PostUsersUuidWebhooksRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostUsersUuidWebhooksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostUsersUuidWebhooksRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/webhook_subscriptions";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostUsersUuidWebhooksResponse =
        new operations.PostUsersUuidWebhooksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postUsersUuidWebhooks201ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostUsersUuidWebhooks201ApplicationJSON
              );
          }
          break;
        case [400, 401, 404, 409].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostUsersUuidWebhooksErrorResponse
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postUsersUuidWebhooks403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostUsersUuidWebhooks403ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete Webhook Subscription
   *
   * @remarks
   * Delete a Webhook Subscription.
   */
  delete(
    req: operations.DeleteUsersUserUuidWebhooksWebhookUuidRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteUsersUserUuidWebhooksWebhookUuidResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteUsersUserUuidWebhooksWebhookUuidRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/webhook_subscriptions/{webhook_uuid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteUsersUserUuidWebhooksWebhookUuidResponse =
        new operations.DeleteUsersUserUuidWebhooksWebhookUuidResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              operations.DeleteUsersUserUuidWebhooksWebhookUuidErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Webhook Subscription
   *
   * @remarks
   * Get a specified Webhook Subscription.
   */
  get(
    req: operations.GetUsersUserUuidWebhooksWebhookUuidRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUsersUserUuidWebhooksWebhookUuidResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUsersUserUuidWebhooksWebhookUuidRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/webhook_subscriptions/{webhook_uuid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUsersUserUuidWebhooksWebhookUuidResponse =
        new operations.GetUsersUserUuidWebhooksWebhookUuidResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getUsersUserUuidWebhooksWebhookUuid200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetUsersUserUuidWebhooksWebhookUuid200ApplicationJSON
              );
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              operations.GetUsersUserUuidWebhooksWebhookUuidErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Webhook Subscriptions
   *
   * @remarks
   * Get a list of Webhook Subscriptions for a specified Organization or User.
   */
  list(
    req: operations.ListWebhooksRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListWebhooksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListWebhooksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/webhook_subscriptions";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListWebhooksResponse =
        new operations.ListWebhooksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listWebhooks200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListWebhooks200ApplicationJSON
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              operations.ListWebhooksErrorResponse
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listWebhooks403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListWebhooks403ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
