/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class EventTypes {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get Event Type
   *
   * @remarks
   * Returns information about a specified Event Type.
   */
  get(
    req: operations.GetEventTypesUuidRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventTypesUuidResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventTypesUuidRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/event_types/{uuid}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventTypesUuidResponse =
        new operations.GetEventTypesUuidResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEventTypesUuid200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetEventTypesUuid200ApplicationJSON
            );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              operations.GetEventTypesUuidErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Event Type Available Times
   *
   * @remarks
   * Returns a list of available times for an event type within a specified date range.
   *
   * Date range can be no greater than 1 week (7 days).
   *
   * **NOTE:**
   * * This endpoint does not support traditional keyset pagination.
   */
  getAvailableTimes(
    req: operations.GetEventTypeAvailableTimesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventTypeAvailableTimesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventTypeAvailableTimesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/event_type_available_times";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventTypeAvailableTimesResponse =
        new operations.GetEventTypeAvailableTimesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEventTypeAvailableTimes200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetEventTypeAvailableTimes200ApplicationJSON
              );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              operations.GetEventTypeAvailableTimesErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List User's Event Types
   *
   * @remarks
   * Returns all Event Types associated with a specified User. Use:
   *
   * * `organization` to look up all Event Types that belong to the organization
   *
   * * `user` to look up a user's Event Types in an organization
   *
   * Either `organization` or `user` are required query params when using this endpoint.
   */
  list(
    req: operations.ListEventTypesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListEventTypesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListEventTypesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/event_types";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListEventTypesResponse =
        new operations.ListEventTypesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listEventTypes200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListEventTypes200ApplicationJSON
            );
          }
          break;
        case [400, 401, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              operations.ListEventTypesErrorResponse
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listEventTypes403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListEventTypes403ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
