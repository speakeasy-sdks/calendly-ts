/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Cancellation } from "./cancellation";
import { InviteeQuestionAndAnswer } from "./inviteequestionandanswer";
import { InviteeTracking } from "./inviteetracking";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Provides data pertaining to the associated no show for the Invitee
 */
export class InviteeNoShow1 extends SpeakeasyBase {
  /**
   * The moment when the no show was created
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * Canonical reference (unique identifier) for the no show
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * The currency format that the payment is in.
 */
export enum InviteePaymentCurrencyEnum {
  Aud = "AUD",
  Cad = "CAD",
  Eur = "EUR",
  Gbp = "GBP",
  Usd = "USD",
}

/**
 * Payment provider
 */
export enum InviteePaymentProviderEnum {
  Stripe = "stripe",
  Paypal = "paypal",
}

/**
 * Invitee payment
 */
export class InviteePayment extends SpeakeasyBase {
  /**
   * The amount of the payment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The currency format that the payment is in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: InviteePaymentCurrencyEnum;

  /**
   * Unique identifier for the payment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "external_id" })
  externalId: string;

  /**
   * Payment provider
   */
  @SpeakeasyMetadata()
  @Expose({ name: "provider" })
  provider: InviteePaymentProviderEnum;

  /**
   * Indicates whether the payment was successfully processed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "successful" })
  successful: boolean;

  /**
   * Terms of the payment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "terms" })
  terms: string;
}

/**
 * Assuming reconfirmation is enabled for the event type, when reconfirmation is requested this object is present with a `created_at` that reflects when the reconfirmation notification was sent. Once the invitee has reconfirmed the `confirmed_at` attribute will change from `null` to a timestamp that reflects when they took action.
 */
export class InviteeReconfirmation extends SpeakeasyBase {
  /**
   * When the Invitee confirmed their attendance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "confirmed_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  confirmedAt: Date;

  /**
   * When the reconfirmation was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;
}

/**
 * Indicates if the invitee is "active" or "canceled"
 */
export enum InviteeStatusEnum {
  Active = "active",
  Canceled = "canceled",
}

/**
 * An individual who has been invited to meet with a Calendly member
 */
export class Invitee extends SpeakeasyBase {
  /**
   * Link to cancelling the event for the invitee
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cancel_url" })
  cancelUrl: string;

  /**
   * Provides data pertaining to the cancellation of the Event
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cancellation" })
  @Type(() => Cancellation)
  cancellation?: Cancellation;

  /**
   * The moment when the event was created (e.g. "2020-01-02T03:04:05.678123Z")
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * The invitee’s email address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email: string;

  /**
   * A reference to the event
   */
  @SpeakeasyMetadata()
  @Expose({ name: "event" })
  event: string;

  /**
   * The first name of the invitee who booked the event when the event type is configured to use separate fields for first name and last name. Null when event type is configured to use a single field for name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName: string;

  /**
   * The last name of the invitee who booked the event when the event type is configured to use separate fields for first name and last name. Null when event type is configured to use a single field for name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName: string;

  /**
   * The invitee’s name (in human-readable format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Link to new invitee, after reschedule
   */
  @SpeakeasyMetadata()
  @Expose({ name: "new_invitee" })
  newInvitee: string;

  /**
   * Provides data pertaining to the associated no show for the Invitee
   */
  @SpeakeasyMetadata()
  @Expose({ name: "no_show" })
  @Type(() => InviteeNoShow1)
  noShow: InviteeNoShow1;

  /**
   * Reference to old Invitee instance that got rescheduled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "old_invitee" })
  oldInvitee: string;

  /**
   * Invitee payment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payment" })
  @Type(() => InviteePayment)
  payment: InviteePayment;

  /**
   * A collection of the invitee's responses to questions on the event booking confirmation form
   */
  @SpeakeasyMetadata({ elemType: InviteeQuestionAndAnswer })
  @Expose({ name: "questions_and_answers" })
  @Type(() => InviteeQuestionAndAnswer)
  questionsAndAnswers: InviteeQuestionAndAnswer[];

  /**
   * Assuming reconfirmation is enabled for the event type, when reconfirmation is requested this object is present with a `created_at` that reflects when the reconfirmation notification was sent. Once the invitee has reconfirmed the `confirmed_at` attribute will change from `null` to a timestamp that reflects when they took action.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reconfirmation" })
  @Type(() => InviteeReconfirmation)
  reconfirmation: InviteeReconfirmation;

  /**
   * Link to rescheduling the event for the invitee
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reschedule_url" })
  rescheduleUrl: string;

  /**
   * Indicates if this invitee has rescheduled. If `true`, a reference to the new Invitee instance is provided in the `new_invitee` field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rescheduled" })
  rescheduled: boolean;

  /**
   * Reference to a routing form submission that redirected the invitee to a booking page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "routing_form_submission" })
  routingFormSubmission: string;

  /**
   * Indicates if the invitee is "active" or "canceled"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: InviteeStatusEnum;

  /**
   * The phone number to use when sending text (SMS) reminders
   */
  @SpeakeasyMetadata()
  @Expose({ name: "text_reminder_number" })
  textReminderNumber: string;

  /**
   * Time zone to use when displaying time to the invitee
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timezone" })
  timezone: string;

  /**
   * The UTM and Salesforce tracking parameters associated with an Invitee
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tracking" })
  @Type(() => InviteeTracking)
  tracking: InviteeTracking;

  /**
   * The moment when the event was last updated (e.g. "2020-01-02T03:04:05.678123Z")
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  /**
   * Canonical reference (unique identifier) for the invitee
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}
