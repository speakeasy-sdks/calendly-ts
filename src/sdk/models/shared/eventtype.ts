/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EventTypeCustomQuestion } from "./eventtypecustomquestion";
import { Profile } from "./profile";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Indicates if the event type is for a poll or an instant booking
 */
export enum EventTypeBookingMethodEnum {
  Instant = "instant",
  Poll = "poll",
}

/**
 * Indicates if the event type is "solo" (belongs to an individual user) or "group"
 */
export enum EventTypeKindEnum {
  Solo = "solo",
  Group = "group",
}

/**
 * A formatted description of the kind of event type.
 */
export enum EventTypeKindDescriptionEnum {
  Collective = "Collective",
  Group = "Group",
  OneOnOne = "One-on-One",
  RoundRobin = "Round Robin",
}

/**
 * Indicates if the event type is "round robin" (alternates between hosts) or "collective" (invitees pick a time when all participants are available) or "null" (the event type doesn’t consider the availability of a group participants)
 */
export enum EventTypePoolingTypeEnum {
  RoundRobin = "round_robin",
  Collective = "collective",
  Null = "null",
}

/**
 * Indicates if the event type is "AdhocEventType" (ad hoc event) or "StandardEventType" (standard event type)
 */
export enum EventTypeTypeEnum {
  StandardEventType = "StandardEventType",
  AdhocEventType = "AdhocEventType",
}

/**
 * A configuration for an Event
 */
export class EventType extends SpeakeasyBase {
  /**
   * Indicates if the event is active or not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active: boolean;

  /**
   * Indicates if this event type is managed by an organization admin
   */
  @SpeakeasyMetadata()
  @Expose({ name: "admin_managed" })
  adminManaged: boolean;

  /**
   * Indicates if the event type is for a poll or an instant booking
   */
  @SpeakeasyMetadata()
  @Expose({ name: "booking_method" })
  bookingMethod: EventTypeBookingMethodEnum;

  /**
   * The hexadecimal color value of the event type's scheduling page
   */
  @SpeakeasyMetadata()
  @Expose({ name: "color" })
  color: string;

  /**
   * The moment the event type was created (e.g. "2020-01-02T03:04:05.678123Z")
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata({ elemType: EventTypeCustomQuestion })
  @Expose({ name: "custom_questions" })
  @Type(() => EventTypeCustomQuestion)
  customQuestions: EventTypeCustomQuestion[];

  /**
   * The moment the event type was deleted (e.g. "2020-01-02T03:04:05.678123Z"). Since event types can be deleted but their scheduled events remain it's useful to fetch a deleted event type when you still require event type data for a scheduled event.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deleted_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  deletedAt: Date;

  /**
   * The event type's description (formatted with HTML)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description_html" })
  descriptionHtml: string;

  /**
   * The event type's description (in non formatted text)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description_plain" })
  descriptionPlain: string;

  /**
   * The length of sessions booked with this event type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration: number;

  /**
   * Contents of a note that may be associated with the event type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "internal_note" })
  internalNote: string;

  /**
   * Indicates if the event type is "solo" (belongs to an individual user) or "group"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind: EventTypeKindEnum;

  /**
   * A formatted description of the kind of event type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind_description" })
  kindDescription: EventTypeKindDescriptionEnum;

  /**
   * The event type name (in human-readable format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Indicates if the event type is "round robin" (alternates between hosts) or "collective" (invitees pick a time when all participants are available) or "null" (the event type doesn’t consider the availability of a group participants)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pooling_type" })
  poolingType: EventTypePoolingTypeEnum;

  /**
   * The publicly visible profile of a User or a Team that's associated with the Event Type (note: some Event Types don't have profiles)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "profile" })
  @Type(() => Profile)
  profile: Profile;

  /**
   * The URL of the user’s scheduling site where invitees book this event type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scheduling_url" })
  schedulingUrl: string;

  /**
   * Indicates if the event type is hidden on the owner's main scheduling page
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secret" })
  secret: boolean;

  /**
   * The portion of the event type's URL that identifies a specific web page (in a human-readable format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "slug" })
  slug: string;

  /**
   * Indicates if the event type is "AdhocEventType" (ad hoc event) or "StandardEventType" (standard event type)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: EventTypeTypeEnum;

  /**
   * The moment the event type was last updated (e.g. "2020-01-02T03:04:05.678123Z")
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  /**
   * Canonical reference (unique identifier) for the event type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}
