/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class ZoomConferenceDataExtra extends SpeakeasyBase {
  /**
   * Zoom International Dial-in Numbers URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "intl_numbers_url" })
  intlNumbersUrl?: string;
}

export class ZoomConferenceDataSettingsGlobalDialInNumbers extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city?: string;

  /**
   * Country code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "country_name" })
  countryName?: string;

  /**
   * Phone number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number" })
  number?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class ZoomConferenceDataSettings extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: ZoomConferenceDataSettingsGlobalDialInNumbers,
  })
  @Expose({ name: "global_dial_in_numbers" })
  @Type(() => ZoomConferenceDataSettingsGlobalDialInNumbers)
  globalDialInNumbers?: ZoomConferenceDataSettingsGlobalDialInNumbers[];
}

/**
 * The conference metadata supplied by Zoom
 */
export class ZoomConferenceData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "extra" })
  @Type(() => ZoomConferenceDataExtra)
  extra?: ZoomConferenceDataExtra;

  /**
   * The conference ID provided by Zoom
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Zoom meeting password
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "settings" })
  @Type(() => ZoomConferenceDataSettings)
  settings?: ZoomConferenceDataSettings;
}

/**
 * Indicates the current status of the Zoom conference
 */
export enum ZoomConferenceStatusEnum {
  Initiated = "initiated",
  Processing = "processing",
  Pushed = "pushed",
  Failed = "failed",
}

/**
 * The event location is a Zoom conference
 */
export enum ZoomConferenceTypeEnum {
  ZoomConference = "zoom_conference",
}

/**
 * Meeting will take place in a Zoom conference
 */
export class ZoomConference extends SpeakeasyBase {
  /**
   * The conference metadata supplied by Zoom
   */
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => ZoomConferenceData)
  data: ZoomConferenceData;

  /**
   * Zoom meeting url
   */
  @SpeakeasyMetadata()
  @Expose({ name: "join_url" })
  joinUrl: string;

  /**
   * Indicates the current status of the Zoom conference
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: ZoomConferenceStatusEnum;

  /**
   * The event location is a Zoom conference
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: ZoomConferenceTypeEnum;
}
