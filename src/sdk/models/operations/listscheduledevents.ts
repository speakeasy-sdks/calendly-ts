/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Whether the scheduled event is `active` or `canceled`
 */
export enum ListScheduledEventsStatusEnum {
  Active = "active",
  Canceled = "canceled",
}

export class ListScheduledEventsRequest extends SpeakeasyBase {
  /**
   * The number of rows to return
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=count" })
  count?: number;

  /**
   * Return events that are scheduled with the invitee associated with this email address
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=invitee_email",
  })
  inviteeEmail?: string;

  /**
   * Include events with start times prior to this time (sample time format: "2020-01-02T03:04:05.678123Z"). This time should use the UTC timezone.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_start_time",
  })
  maxStartTime?: string;

  /**
   * Include events with start times after this time (sample time format: "2020-01-02T03:04:05.678123Z"). This time should use the UTC timezone.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_start_time",
  })
  minStartTime?: string;

  /**
   * Return events that are scheduled with the organization associated with this URI
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=organization",
  })
  organization?: string;

  /**
   * The token to pass to get the next or previous portion of the collection
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_token",
  })
  pageToken?: string;

  /**
   * Order results by the specified field and direction. Accepts comma-separated list of {field}:{direction} values.
   *
   * @remarks
   * Supported fields are: start_time.
   * Sort direction is specified as: asc, desc.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;

  /**
   * Whether the scheduled event is `active` or `canceled`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=status",
  })
  status?: ListScheduledEventsStatusEnum;

  /**
   * Return events that are scheduled with the user associated with this URI
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=user" })
  user?: string;
}

export enum ListScheduledEvents403ApplicationJSONMessageEnum {
  YouDoNotHavePermissionToAccessThisResource = "You do not have permission to access this resource.",
  PleaseAlsoSpecifyOrganizationWhenRequestingEventsForAUserWithinYourOrganization = "Please also specify organization when requesting events for a user within your organization.",
  ThisUserIsNotInYourOrganization = "This user is not in your organization",
  YouDoNotHavePermission = "You do not have permission",
}

export enum ListScheduledEvents403ApplicationJSONTitleEnum {
  PermissionDenied = "Permission Denied",
}

/**
 * Permission Denied
 */
export class ListScheduledEvents403ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: ListScheduledEvents403ApplicationJSONMessageEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: ListScheduledEvents403ApplicationJSONTitleEnum;
}

export class ListScheduledEventsErrorResponseDetails extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;

  @SpeakeasyMetadata()
  @Expose({ name: "parameter" })
  parameter?: string;
}

/**
 * Error Object
 */
export class ListScheduledEventsErrorResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ListScheduledEventsErrorResponseDetails })
  @Expose({ name: "details" })
  @Type(() => ListScheduledEventsErrorResponseDetails)
  details?: ListScheduledEventsErrorResponseDetails[];

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: string;
}

/**
 * Service response
 */
export class ListScheduledEvents200ApplicationJSON extends SpeakeasyBase {
  /**
   * The set of scheduled events matching the criteria
   */
  @SpeakeasyMetadata({ elemType: shared.Event })
  @Expose({ name: "collection" })
  @Type(() => shared.Event)
  collection: shared.Event[];

  @SpeakeasyMetadata()
  @Expose({ name: "pagination" })
  @Type(() => shared.Pagination)
  pagination: shared.Pagination;
}

export class ListScheduledEventsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Request is not valid
   */
  @SpeakeasyMetadata()
  errorResponse?: ListScheduledEventsErrorResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  listScheduledEvents200ApplicationJSONObject?: ListScheduledEvents200ApplicationJSON;

  /**
   * Permission Denied
   */
  @SpeakeasyMetadata()
  listScheduledEvents403ApplicationJSONObject?: ListScheduledEvents403ApplicationJSON;
}
