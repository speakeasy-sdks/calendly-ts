/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class RoutingForms {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List Routing Form Submissions
   *
   * @remarks
   * Get a list of Routing Form Submissions for a specified Routing Form.
   */
  getSubmissions(
    req: operations.GetRoutingFormSubmissionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRoutingFormSubmissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRoutingFormSubmissionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/routing_form_submissions";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRoutingFormSubmissionsResponse =
        new operations.GetRoutingFormSubmissionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRoutingFormSubmissions200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetRoutingFormSubmissions200ApplicationJSON
              );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              operations.GetRoutingFormSubmissionsErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Routing Form Submission
   *
   * @remarks
   * Get a specified Routing Form Submission.
   */
  getSubmissionsByUuid(
    req: operations.GetRoutingFormSubmissionsUuidRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRoutingFormSubmissionsUuidResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRoutingFormSubmissionsUuidRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/routing_form_submissions/{uuid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRoutingFormSubmissionsUuidResponse =
        new operations.GetRoutingFormSubmissionsUuidResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRoutingFormSubmissionsUuid200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetRoutingFormSubmissionsUuid200ApplicationJSON
              );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              operations.GetRoutingFormSubmissionsUuidErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Routing Form
   *
   * @remarks
   * Get a specified Routing Form.
   */
  getByUuid(
    req: operations.GetRoutingFormsUuidRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRoutingFormsUuidResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRoutingFormsUuidRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/routing_forms/{uuid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRoutingFormsUuidResponse =
        new operations.GetRoutingFormsUuidResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRoutingFormsUuid200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetRoutingFormsUuid200ApplicationJSON
              );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              operations.GetRoutingFormsUuidErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Routing Forms
   *
   * @remarks
   * Get a list of Routing Forms for a specified Organization.
   */
  list(
    req: operations.ListRoutingFormsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListRoutingFormsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListRoutingFormsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/routing_forms";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListRoutingFormsResponse =
        new operations.ListRoutingFormsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listRoutingForms200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListRoutingForms200ApplicationJSON
            );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              operations.ListRoutingFormsErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
